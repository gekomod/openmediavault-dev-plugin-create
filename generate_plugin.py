import os
import argparse
from debian_changelog_generator import *
import create_workbench
from datetime import datetime

# Domyślne treści plików
DEBIAN_CHANGELOG = """openmediavault-PLUGINNAME (1.0.0) stable; urgency=low

  * Initial release.

 -- OpenMediaVault Plugin Generator  {date}
"""

DEBIAN_COMPAT = "13"

DEBIAN_CONTROL = """Source: openmediavault-PLUGINNAME
Section: FILETYPE
XB-Plugin-Section: FILETYPE
Priority: optional
Maintainer: OpenMediaVault Plugin Generator
Build-Depends: debhelper (>= 11)
Standards-Version: 4.5.0
Homepage: https://github.com/gekomod/

Package: openmediavault-PLUGINNAME
Architecture: all
Depends: openmediavault (>= 7)
Description: DESCRIPTION_PLUGINNAME.
"""

DEBIAN_COPYRIGHT = """Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/

Files: *
Copyright: 2024 OpenMediaVault Plugin Generator
License: GPL-3+

License: GPL-3+
 /usr/share/common-licenses/GPL-3
"""

DEBIAN_INSTALL = "usr/* usr"

DEBIAN_POSTINST = """#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

RED="\\e[31m"
GREEN="\\e[32m"
ENDCOLOR="\\e[0m"

case "$1" in
    configure)
        # Activate package triggers
        dpkg-trigger update-workbench

        # Initialize and migrate configuration database.
        echo "${GREEN}Updating configuration database ...${ENDCOLOR}"
        omv-confdbadm create "conf.system.FILETYPE.PLUGINNAME"
        if [ -n "$2" ]; then
            omv-confdbadm migrate "conf.system.FILETYPE.PLUGINNAME" "${2}"
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument" >&2
        exit 1
    ;;
esac

exit 0
"""

DEBIAN_POSTRM = """#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

remove_action() {
    dpkg-trigger update-workbench
}

case "$1" in
    purge)
        remove_action

        omv_config_delete "/config/system/FILETYPE/PLUGINNAME"
    ;;

    remove)
        remove_action
    ;;

    upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
    ;;

    *)
        echo "postrm called with unknown argument \\`$1'" >&2
        exit 1
    ;;
esac

exit 0
"""

DEBIAN_RULES = """#!/usr/bin/make -f

%:
	dh $@
"""

DEBIAN_TRIGGERS = "activate restart-engined"

ENGINED_MODULE_INC = """<?php

/**
 * Copyright (C) 2013-2024 OpenMediaVault Plugin Developers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * Generated by plugin creation script
 */

class OMVModulePLUGINBIGNAME extends \\OMV\\Engine\\Module\\ServiceAbstract implements \\OMV\\Engine\\Module\\IServiceStatus
{
    public function getName()
    {
        return "PLUGINNAME";
    }
    
    public function getStatus()
    {
        return array(
            "name" => "PLUGINNAME",
            "title" => "PLUGINNAME",
            "enabled" => true,
            "running" => true
        );
    }
}
"""

ENGINED_RPC_INC = """<?php

class FILETYPEPLUGINNAME extends \\OMV\\Rpc\\ServiceAbstract {
    public function getName() {
        return "FILETYPEPLUGINNAME";
    }

    public function initialize() {
        $this->registerMethod('getSettings');
        $this->registerMethod('setSettings');
    }

    function getSettings($params, $context) {
        $this->validateMethodContext($context, [ 'role' => OMV_ROLE_ADMINISTRATOR ]);
         
        $this->updateSettingsActualIp();
        
        $db = \\OMV\\Config\\Database::getInstance();
        $object = $db->get('conf.system.FILETYPE.PLUGINNAME');
        return $object->getAssoc();
    }

    function setSettings($params, $context) {
        $this->validateMethodContext($context, ['role' => OMV_ROLE_ADMINISTRATOR]);
        $db = \\OMV\\Config\\Database::getInstance();
        $object = $db->get('conf.system.FILETYPE.PLUGINNAME');
        $object->setAssoc($params);
        $db->set($object);
    
        return $object->getAssoc();
    }
}
"""

ENGINED_INC_92PLUGINNAME_INC = """<?php
/**
 * This file is part of OpenMediaVault.
 *
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Gekomod <jnowakk11@gmail.com>
 * @copyright Copyright (c) 2009-2024 Gekomod
 *
 * OpenMediaVault is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OpenMediaVault is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
 */
require_once("openmediavault/functions.inc");

\\OMV\\System\\LogFileSpec::registerSpecification("PLUGINNAME", [
  "filename" => "PLUGINNAME",
  "filepath" => "/var/log/PLUGINNAME.log",
  "regex" => "/^(\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2})\\s+(.+)$/",
  "columns" => [
      "ts" => [
          "index" => 1,
          "func" => function($v) { return strpdate($v,"Y-m-d H:i:s"); }
      ],
      "date" => [
          "index" => 1,
          "func" => function($v) {
              return strftime("%c", strpdate($v,"Y-m-d H:i:s"));
          }
      ],
      "message" => 2
  ]]);
"""

LOCALE_POT = """# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the openmediavault-PLUGINNAME package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: openmediavault-PLUGINNAME\\n"
"Report-Msgid-Bugs-To: \\n"
"POT-Creation-Date: {date}\\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"
"Language-Team: LANGUAGE <LL@li.org>\\n"
"Language: \\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=CHARSET\\n"
"Content-Transfer-Encoding: 8bit\\n"

msgid "PLUGINNAME"
msgstr ""
"""

CONFDB_SCRIPT = """#!/bin/sh
#
# @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
# @copyright Copyright (c) 2013-2024 openmediavault plugin developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /usr/share/openmediavault/scripts/helper-functions

SERVICE_XPATH_NAME="PLUGINNAME"
SERVICE_XPATH="/config/system/FILETYPE/${SERVICE_XPATH_NAME}"

if ! omv_config_exists "${SERVICE_XPATH}"; then
    omv_config_add_node "/config/system/FILETYPE" "${SERVICE_XPATH_NAME}"
    omv_config_add_key "${SERVICE_XPATH}" "enable" "0"
CONFIG_OPTIONS
fi

exit 0
"""

DATAMODELS_JSON = """{
    "type": "config",
    "id": "conf.system.FILETYPE.PLUGINNAME",
    "title": "PLUGINNAME",
    "queryinfo": {
        "xpath": "//system/FILETYPE/PLUGINNAME",
        "iterable": false
    },
    "properties": {
        "enable": {
            "type": "boolean",
            "default": false
        },
CONFIG_PROPERTIES
    }
}
"""

# Lista dostępnych typów plików
FILETYPE_LIST = ["network", "storage", "services", "usermgmt", "diagnostics"]

# Lista dostępnych lokalizacji
LOCALES = [
    "ach", "ady", "ar_SA", "bg", "ca_ES", "cs_CZ", "da_DA", "de_DE", "en_GB",
    "es_CO", "es_ES", "eu", "fi", "fr_FR", "gl", "hu", "hu_HU", "it_IT", "ja_JP",
    "jv", "ko_KR", "nl_BE", "nl_NL", "no_NO", "oc", "pl", "pl_PL", "pt", "pt_BR",
    "ru_RU", "sv_SV", "tr", "uk_UK", "zh_CN", "zh_TW"
]

def create_plugin(plugin_name, filetype, config_options):
    # Sprawdź, czy typ pliku jest poprawny
    if filetype not in FILETYPE_LIST:
        raise ValueError(f"Nieprawidłowy typ pliku: {filetype}. Dostępne typy: {FILETYPE_LIST}")

    # Główny katalog pluginu
    plugin_dir = f"openmediavault-{plugin_name}"
    os.makedirs(plugin_dir, exist_ok=True)

    # Struktura katalogów DEBIAN
    debian_dir = os.path.join(plugin_dir, "DEBIAN")
    os.makedirs(debian_dir, exist_ok=True)

    # Tworzenie plików DEBIAN
    with open(os.path.join(debian_dir, "changelog"), "w") as f:
        f.write(DEBIAN_CHANGELOG.replace("PLUGINNAME", plugin_name).replace("{date}", datetime.now().strftime("%a, %d %b %Y %H:%M:%S %z")))

    with open(os.path.join(debian_dir, "compat"), "w") as f:
        f.write(DEBIAN_COMPAT)

    with open(os.path.join(debian_dir, "control"), "w") as f:
        f.write(DEBIAN_CONTROL.replace("PLUGINNAME", plugin_name).replace("FILETYPE", filetype))

    with open(os.path.join(debian_dir, "copyright"), "w") as f:
        f.write(DEBIAN_COPYRIGHT)

    with open(os.path.join(debian_dir, "install"), "w") as f:
        f.write(DEBIAN_INSTALL)

    with open(os.path.join(debian_dir, "postinst"), "w") as f:
        f.write(DEBIAN_POSTINST.replace("PLUGINNAME", plugin_name).replace("FILETYPE", filetype))

    with open(os.path.join(debian_dir, "postrm"), "w") as f:
        f.write(DEBIAN_POSTRM.replace("PLUGINNAME", plugin_name).replace("FILETYPE", filetype))

    with open(os.path.join(debian_dir, "rules"), "w") as f:
        f.write(DEBIAN_RULES)

    with open(os.path.join(debian_dir, "triggers"), "w") as f:
        f.write(DEBIAN_TRIGGERS)

    # Struktura katalogów usr
    usr_dir = os.path.join(plugin_dir, "usr")
    os.makedirs(os.path.join(usr_dir, "sbin"), exist_ok=True)
    open(os.path.join(usr_dir, "sbin", f"{plugin_name}"), "w").close()  # Pusty plik

    # Struktura katalogów openmediavault
    omv_dir = os.path.join(usr_dir, "share", "openmediavault")
    os.makedirs(os.path.join(omv_dir, "confdb", "create.d"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "datamodels"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "engined", "inc"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "engined", "module"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "engined", "rpc"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "locale"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "workbench", "component.d"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "workbench", "log.d"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "workbench", "navigation.d"), exist_ok=True)
    os.makedirs(os.path.join(omv_dir, "workbench", "route.d"), exist_ok=True)

    # Tworzenie pliku confdb/create.d/conf.system.FILETYPE.PLUGINNAME.sh
    confdb_script = CONFDB_SCRIPT.replace("PLUGINNAME", plugin_name).replace("FILETYPE", filetype)
    config_options_str = "\n".join([f'    omv_config_add_key "${{SERVICE_XPATH}}" "{key}" "{value}"' for key, value in config_options.items()])
    confdb_script = confdb_script.replace("CONFIG_OPTIONS", config_options_str)
    with open(os.path.join(omv_dir, "confdb", "create.d", f"conf.system.{filetype}.{plugin_name}.sh"), "w") as f:
        f.write(confdb_script)

    # Tworzenie pliku datamodels/conf.system.FILETYPE.PLUGINNAME.json
    datamodels_json = DATAMODELS_JSON.replace("PLUGINNAME", plugin_name).replace("FILETYPE", filetype)
    config_properties = ",\n".join([f'        "{key}": {{\n            "type": "string",\n            "default": "{value}"\n        }}' for key, value in config_options.items()])
    datamodels_json = datamodels_json.replace("CONFIG_PROPERTIES", config_properties)
    with open(os.path.join(omv_dir, "datamodels", f"conf.system.{filetype}.{plugin_name}.json"), "w") as f:
        f.write(datamodels_json)

    # Tworzenie plików engined
    with open(os.path.join(omv_dir, "engined", "module", f"{plugin_name}.inc"), "w") as f:
        f.write(ENGINED_MODULE_INC.replace("PLUGINNAME", plugin_name).replace("PLUGINBIGNAME", f"{filetype.capitalize()}{plugin_name.capitalize()}"))

    with open(os.path.join(omv_dir, "engined", "rpc", f"{filetype.capitalize()}{plugin_name.capitalize()}.inc"), "w") as f:
        f.write(ENGINED_RPC_INC.replace("FILETYPEPLUGINNAME", f"{filetype.capitalize()}{plugin_name.capitalize()}").replace("FILETYPE", filetype).replace("PLUGINNAME", plugin_name))

    with open(os.path.join(omv_dir, "engined", "inc", f"92{plugin_name}.inc"), "w") as f:
        f.write(ENGINED_INC_92PLUGINNAME_INC.replace("PLUGINNAME", plugin_name))

    # Tworzenie plików locale
    with open(os.path.join(omv_dir, "locale", f"openmediavault-{plugin_name}.pot"), "w") as f:
        f.write(LOCALE_POT.replace("PLUGINNAME", plugin_name).replace("{date}", datetime.now().strftime("%Y-%m-%d %H:%M:%S%z")))

    for locale in LOCALES:
        locale_dir = os.path.join(omv_dir, "locale", locale)
        os.makedirs(locale_dir, exist_ok=True)
        open(os.path.join(locale_dir, f"openmediavault-{plugin_name}.po"), "w").close()  # Pusty plik

    # Tworzenie plików workbench
    workbench_files = [
        f"omv-{filetype}-{plugin_name}-form-page.yaml",
        f"omv-{filetype}-{plugin_name}-navigation-page.yaml"
    ]
    for file in workbench_files:
        open(os.path.join(omv_dir, "workbench", "component.d", file), "w").close()

    create_workbench.create_workbench_structure(plugin_name,filetype)
    print(f"Plugin {plugin_name} został pomyślnie utworzony w katalogu {plugin_dir}.")

def generate_changelog(plugin_name):
    changelog_content = DEBIAN_CHANGELOG.replace("PLUGINNAME", plugin_name).replace("{date}", datetime.now().strftime("%a, %d %b %Y %H:%M:%S %z"))
    print("Wygenerowano changelog:")
    print(changelog_content)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generuj strukturę plików dla pluginu OpenMediaVault.")
    subparsers = parser.add_subparsers(dest="command", help="Dostępne komendy")

    # Komenda create
    create_parser = subparsers.add_parser("create", help="Utwórz strukturę plików dla pluginu.")
    create_parser.add_argument("plugin_name", help="Nazwa pluginu (np. myplugin).")
    create_parser.add_argument("filetype", choices=FILETYPE_LIST, help="Typ pliku (np. network, storage).")
    create_parser.add_argument("--config", nargs="+", help="Opcje konfiguracyjne w formacie key:value (np. example1:tekst1 example2:tekst2).")

    # Komenda gen changelog
    changelog_parser = subparsers.add_parser("gen", help="Generuj plik changelog.")
    changelog_parser.add_argument("changelog", help="Generuj plik changelog.")
    changelog_parser.add_argument("plugin_name", help="Nazwa pluginu (np. myplugin).")

    # Komenda gen changelog
    changelog_parser = subparsers.add_parser("changelog", help="Generate ChangeLog from github repo changelog.")

    args = parser.parse_args()

    if args.command == "create":
        # Przetwórz opcje konfiguracyjne
        config_options = {}
        if args.config:
            for item in args.config:
                key, value = item.split(":")
                config_options[key] = value

        # Utwórz plugin
        create_plugin(args.plugin_name, args.filetype, config_options)
    elif args.command == "gen" and args.changelog == "changelog":
        # Generuj changelog
        generate_changelog(args.plugin_name)
    elif args.command == "changelog":
        generate_debian_changelog()
    else:
        parser.print_help()